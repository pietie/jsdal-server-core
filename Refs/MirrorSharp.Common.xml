<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MirrorSharp.Common</name>
    </assembly>
    <members>
        <member name="T:MirrorSharp.Advanced.FastJsonWriterExtensions">
            <summary>
            Provides common helper methods for <see cref="T:MirrorSharp.Advanced.IFastJsonWriter"/>.
            </summary>
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.String)">
            <summary>Writes a new JSON property with a string value (e.g. <c>"name": "value"</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write; can be null.</param> 
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.Text.StringBuilder)">
            <summary>Writes a new JSON property with a string value (e.g. <c>"name": "value"</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write; can be null.</param> 
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.ArraySegment{System.Char})">
            <summary>Writes a new JSON property with a string value (e.g. <c>"name": "value"</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write.</param> 
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.Collections.Immutable.ImmutableArray{System.Char})">
            <summary>Writes a new JSON property with a string value (e.g. <c>"name": "value"</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write; can be null.</param> 
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.Char)">
            <summary>Writes a new JSON property with a single-character string value (e.g. <c>"name": "c"</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.Int32)">
            <summary>Writes a new JSON property with an integer value (e.g. <c>"name": 1</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WriteProperty(MirrorSharp.Advanced.IFastJsonWriter,System.String,System.Boolean)">
            <summary>Writes a new JSON property with a boolean value (e.g. <c>"name": true</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
            <param name="value">Value of the property to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WritePropertyStartObject(MirrorSharp.Advanced.IFastJsonWriter,System.String)">
            <summary>Writes a new JSON property and opens its object value (e.g. <c>"name": {</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.FastJsonWriterExtensions.WritePropertyStartArray(MirrorSharp.Advanced.IFastJsonWriter,System.String)">
            <summary>Writes a new JSON property and opens its array value (e.g. <c>"name": [</c>).</summary>
            <param name="writer">Writer to write the property to.</param>
            <param name="name">Name of the property to write.</param>
        </member>
        <member name="T:MirrorSharp.Advanced.IExceptionLogger">
            <summary>Provides a way to log unhandled exceptions.</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.IExceptionLogger.LogException(System.Exception,MirrorSharp.Advanced.IWorkSession)">
            <summary>Logs a given exception.</summary>
            <param name="exception">Exception to log.</param>
            <param name="session">Current <see cref="T:MirrorSharp.Advanced.IWorkSession" /></param>
            <remarks>Implementations should avoid throwing exceptions from this method.</remarks>
        </member>
        <member name="T:MirrorSharp.Advanced.IFastJsonWriter">
            <summary>
            JSON writer used to communicate with MirrorSharp clients.
            </summary>
            <remarks>
            At the moment the output is not actively validated --
            writer can produce invalid JSON if not used carefully.
            </remarks>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteStartObject">
            <summary>Opens a new JSON object (<c>{</c>).</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteEndObject">
            <summary>Closes current JSON object (<c>}</c>).</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteStartArray">
            <summary>Opens an new JSON array (<c>[</c>).</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteEndArray">
            <summary>Closes current JSON array (<c>]</c>).</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WritePropertyName(System.String)">
            <summary>Writes a new JSON property name (e.g. <c>"name":</c>).</summary>
            <param name="name">Name of the property to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.String)">
            <summary>Writes <see cref="T:System.String" /> value as a JSON string.</summary>
            <param name="value">Value to write; can be null.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.Text.StringBuilder)">
            <summary>Writes <see cref="T:System.Text.StringBuilder" /> value as a JSON string.</summary>
            <param name="value">Value to write; can be null.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.ArraySegment{System.Char})">
            <summary>Writes <see cref="T:System.ArraySegment`1" /> value as a JSON string.</summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.Collections.Immutable.ImmutableArray{System.Char})">
            <summary>Writes <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> value as a JSON string.</summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.Char)">
            <summary>Writes <see cref="T:System.Char" /> value as a JSON string.</summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.Int32)">
            <summary>Writes <see cref="T:System.Int32" /> value as a JSON number.</summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.WriteValue(System.Boolean)">
            <summary>Writes <see cref="T:System.Boolean" /> value as a JSON boolean.</summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:MirrorSharp.Advanced.IFastJsonWriter.OpenString">
            <summary>Writes a start <c>"</c> for a JSON string, and returns a <see cref="T:System.IO.TextWriter" /> for writing its content.</summary>
            <returns>A writer for writing into the JSON string.</returns>
            <remarks>The returned writer should be disposed for the string to be closed properly.</remarks>
        </member>
        <member name="T:MirrorSharp.Advanced.IRoslynSession">
            <summary>Represents a user session based on Roslyn.</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.IRoslynSession.Project">
            <summary>Roslyn <see cref="T:Microsoft.CodeAnalysis.Project"/> associated with the current session.</summary>
        </member>
        <member name="T:MirrorSharp.Advanced.ISetOptionsFromClientExtension">
            <summary>An interface used to implement custom (extension) options.</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.ISetOptionsFromClientExtension.TrySetOption(MirrorSharp.Advanced.IWorkSession,System.String,System.String)">
            <summary>Method called each time MirrorSharp encounters an extension option (<c>x-*</c>).</summary>
            <param name="session">Current <see cref="T:MirrorSharp.Advanced.IWorkSession" />.</param>
            <param name="name">Name of the extension option; always starts with 'x-'.</param>
            <param name="value">Value of the extension option, as provided by the client.</param>
            <returns><c>true</c> if extension options is recognized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MirrorSharp.Advanced.ISlowUpdateExtension">
            <summary>An interface used to implement periodic custom processing.</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.ISlowUpdateExtension.ProcessAsync(MirrorSharp.Advanced.IWorkSession,System.Collections.Generic.IList{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>Method called by MirrorSharp periodically (e.g. each 500ms), if there were any changes.</summary>
            <param name="session">Current <see cref="T:MirrorSharp.Advanced.IWorkSession" />.</param>
            <param name="diagnostics">Current diagnostics. <see cref="M:MirrorSharp.Advanced.ISlowUpdateExtension.ProcessAsync(MirrorSharp.Advanced.IWorkSession,System.Collections.Generic.IList{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)" /> can add extra diagnosics if needed.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that MirrorSharp can use to cancel processing.</param>
            <returns>Any object; result will be passed to <see cref="M:MirrorSharp.Advanced.ISlowUpdateExtension.WriteResult(MirrorSharp.Advanced.IFastJsonWriter,System.Object,MirrorSharp.Advanced.IWorkSession)" />.</returns>
            <remarks>If the return value implements <see cref="T:System.IDisposable" />, it will be automatically disposed after <see cref="M:MirrorSharp.Advanced.ISlowUpdateExtension.WriteResult(MirrorSharp.Advanced.IFastJsonWriter,System.Object,MirrorSharp.Advanced.IWorkSession)" /> call.</remarks>
        </member>
        <member name="M:MirrorSharp.Advanced.ISlowUpdateExtension.WriteResult(MirrorSharp.Advanced.IFastJsonWriter,System.Object,MirrorSharp.Advanced.IWorkSession)">
            <summary>Called after <see cref="M:MirrorSharp.Advanced.ISlowUpdateExtension.ProcessAsync(MirrorSharp.Advanced.IWorkSession,System.Collections.Generic.IList{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)" />; writes its result to the client if required.</summary>
            <param name="writer"><see cref="T:MirrorSharp.Advanced.IFastJsonWriter"/> used to write the result.</param>
            <param name="result">Result returned by <see cref="M:MirrorSharp.Advanced.ISlowUpdateExtension.ProcessAsync(MirrorSharp.Advanced.IWorkSession,System.Collections.Generic.IList{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)" />.</param>
            <param name="session">Current <see cref="T:MirrorSharp.Advanced.IWorkSession" />.</param>
        </member>
        <member name="T:MirrorSharp.Advanced.IWorkSession">
            <summary>Represents an active user session.</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.IWorkSession.LanguageName">
            <summary>Returns current session language name (e.g. the value of <see cref="F:Microsoft.CodeAnalysis.LanguageNames.CSharp"/>).</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.IWorkSession.IsRoslyn">
            <summary>Specifies whether the current session is based on Roslyn.</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.IWorkSession.Roslyn">
            <summary>Returns associated Roslyn session if any; throws otherwise.</summary>
        </member>
        <member name="M:MirrorSharp.Advanced.IWorkSession.GetText">
            <summary>Returns current source code handled by the session.</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.IWorkSession.ExtensionData">
            <summary>Arbitrary data associated with the current session.</summary>
        </member>
        <member name="T:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2">
            <summary>Base class for Roslyn-based language options. Should not be used directly.</summary>
            <typeparam name="TParseOptions">Type of <see cref="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.ParseOptions" /> for this language.</typeparam>
            <typeparam name="TCompilationOptions">Type of <see cref="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.CompilationOptions" /> for this language.</typeparam>
        </member>
        <member name="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.ParseOptions">
            <summary><see cref="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.ParseOptions" /> for this language.</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.CompilationOptions">
            <summary><see cref="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.CompilationOptions" /> for this language.</summary>
        </member>
        <member name="P:MirrorSharp.Advanced.MirrorSharpRoslynOptions`2.MetadataReferences">
            <summary><see cref="T:Microsoft.CodeAnalysis.MetadataReference" />s for this language.</summary>
        </member>
        <member name="T:MirrorSharp.MirrorSharpCSharpOptions">
            <summary>MirrorSharp options for C#</summary>
        </member>
        <member name="T:MirrorSharp.MirrorSharpOptions">
            <summary>MirrorSharp options object.</summary>
        </member>
        <member name="M:MirrorSharp.MirrorSharpOptions.#ctor">
            <summary>Creates a new instance of <see cref="T:MirrorSharp.MirrorSharpOptions" />.</summary>
        </member>
        <member name="P:MirrorSharp.MirrorSharpOptions.CSharp">
            <summary>MirrorSharp options for C#.</summary>
            <remarks>These options are ignored if <see cref="M:MirrorSharp.MirrorSharpOptions.DisableCSharp" /> was called.</remarks>
        </member>
        <member name="P:MirrorSharp.MirrorSharpOptions.SetOptionsFromClient">
            <summary>Defines a <see cref="T:MirrorSharp.Advanced.ISetOptionsFromClientExtension" /> used to support extra options.</summary>
        </member>
        <member name="P:MirrorSharp.MirrorSharpOptions.SlowUpdate">
            <summary>Defines a <see cref="T:MirrorSharp.Advanced.ISlowUpdateExtension" /> used to extend periodic processing.</summary>
        </member>
        <member name="P:MirrorSharp.MirrorSharpOptions.ExceptionLogger">
            <summary>Defines a <see cref="T:MirrorSharp.Advanced.IExceptionLogger" /> called for any unhandled exception.</summary>
        </member>
        <member name="P:MirrorSharp.MirrorSharpOptions.IncludeExceptionDetails">
            <summary>Defines whether the exceptions should include full details (messages, stack traces).</summary>
        </member>
        <member name="P:MirrorSharp.MirrorSharpOptions.SelfDebugEnabled">
            <summary>Defines whether the SelfDebug mode is enabled — might reduce performance.</summary>
        </member>
        <member name="M:MirrorSharp.MirrorSharpOptions.DisableCSharp">
            <summary>Disables C# — the language will not be available to the client.</summary>
            <returns>Current <see cref="T:MirrorSharp.MirrorSharpOptions" /> object, for convenience.</returns>
        </member>
        <member name="T:Argument">
            <summary>
            Provides methods for verification of argument preconditions.
            </summary>
        </member>
        <member name="M:Argument.NotNull``1(System.String,``0)">
            <summary>
            Verifies that a given argument value is not <c>null</c> and returns the value provided.
            </summary>
            <typeparam name="T">Type of the <paramref name="name" />.</typeparam>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <returns><paramref name="value"/> if it is not <c>null</c>.</returns>
        </member>
        <member name="M:Argument.NotNull``1(System.String,System.Nullable{``0})">
            <summary>
            Verifies that a given argument value is not <c>null</c> and returns the value provided.
            </summary>
            <typeparam name="T">Type of the <paramref name="name" />.</typeparam>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <returns><paramref name="value"/> if it is not <c>null</c>.</returns>
        </member>
        <member name="M:Argument.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Verifies that a given argument value is not <c>null</c> or empty and returns the value provided.
            </summary>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is empty.</exception>
            <returns><paramref name="value"/> if it is not <c>null</c> or empty.</returns>
        </member>
        <member name="M:Argument.NotNullOrEmpty``1(System.String,``0[])">
            <summary>
            Verifies that a given argument value is not <c>null</c> or empty and returns the value provided.
            </summary>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is empty.</exception>
            <returns><paramref name="value"/> if it is not <c>null</c> or empty.</returns>
        </member>
        <member name="M:Argument.NotNullOrEmpty``1(System.String,``0)">
            <summary>
            Verifies that a given argument value is not <c>null</c> or empty and returns the value provided.
            </summary>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is empty.</exception>
            <returns><paramref name="value"/> if it is not <c>null</c> or empty.</returns>
        </member>
        <member name="M:Argument.NotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary>
            (DO NOT USE) Ensures that NotNullOrEmpty can not be used with plain <see cref="T:System.Collections.IEnumerable"/>,
            as this may cause double enumeration.
            </summary>
        </member>
        <member name="M:Argument.NotNullOrEmpty``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (DO NOT USE) Ensures that NotNullOrEmpty can not be used with plain <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            as this may cause double enumeration.
            </summary>
        </member>
        <member name="M:Argument.Cast``1(System.String,System.Object)">
            <summary>
            Casts a given argument into a given type if possible.
            </summary>
            <typeparam name="T">Type to cast <paramref name="value"/> into.</typeparam>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> can not be cast into type <typeparamref name="T"/>.</exception>
            <returns><paramref name="value"/> cast into <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Argument.NotNullAndCast``1(System.String,System.Object)">
            <summary>
            Verfies that a given argument is not null and casts it into a given type if possible.
            </summary>
            <typeparam name="T">Type to cast <paramref name="value"/> into.</typeparam>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> can not be cast into type <typeparamref name="T"/>.</exception>
            <returns><paramref name="value"/> cast into <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Argument.PositiveOrZero(System.String,System.Int32)">
            <summary>
            Verifies that a given argument value is greater than or equal to zero and returns the value provided.
            </summary>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is less than zero.</exception>
            <returns><paramref name="value"/> if it is greater than or equal to zero.</returns>
        </member>
        <member name="M:Argument.PositiveNonZero(System.String,System.Int32)">
            <summary>
            Verifies that a given argument value is greater than zero and returns the value provided.
            </summary>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is less than or equal to zero.</exception>
            <returns><paramref name="value"/> if it is greater than zero.</returns>
        </member>
        <member name="T:Nito.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Nito.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:Nito.Deque`1.buffer">
            <summary>
            The circular buffer that holds the view.
            </summary>
        </member>
        <member name="F:Nito.Deque`1.offset">
            <summary>
            The offset into <see cref="F:Nito.Deque`1.buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:Nito.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:Nito.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Deque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Nito.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:Nito.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:Nito.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:Nito.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Nito.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nito.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nito.Deque`1.ObjectIsT(System.Object)">
            <summary>
            Returns whether or not the type of a given item indicates it is appropriate for storing in this container.
            </summary>
            <param name="item">The item to test.</param>
            <returns><c>true</c> if the item is appropriate to store in this container; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Nito.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:Nito.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:Nito.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Nito.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Nito.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.Deque`1.buffer"/> than the end).
            </summary>
        </member>
        <member name="P:Nito.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:Nito.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:Nito.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:Nito.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:Nito.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:Nito.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Nito.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Nito.Deque`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Nito.Deque`1.offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Nito.Deque`1.offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Nito.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:Nito.Deque`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:Nito.Deque`1.offset"/>. May not be negative or greater than <see cref="P:Nito.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:Nito.Deque`1.offset"/> before it was decremented.</returns>
        </member>
        <member name="M:Nito.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:Nito.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:Nito.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:Nito.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:Nito.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert.</param>
            <param name="collectionCount">The number of elements in <paramref name="collection"/>. Must be greater than zero, and the sum of <paramref name="collectionCount"/> and <see cref="P:Nito.Deque`1.Count"/> must be less than or equal to <see cref="P:Nito.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:Nito.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Nito.Deque`1.Count"/>.</param>
        </member>
        <member name="M:Nito.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Nito.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:Nito.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Nito.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:Nito.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:Nito.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Nito.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Nito.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
    </members>
</doc>
